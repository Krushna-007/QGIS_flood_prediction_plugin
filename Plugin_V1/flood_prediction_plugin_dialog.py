# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FloodPredictionPluginDialog
                                 A QGIS plugin
 Flood risk prediction using machine learning models
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Krushna Parmar
        email                : contact@krushnaparmar.dev
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Modern QGIS Python API imports
import os

# PyQt imports - modern pattern
from qgis.PyQt import uic, QtWidgets
from qgis.PyQt.QtCore import pyqtSignal, Qt
from qgis.PyQt.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit, 
    QListWidget, QTableWidget, QGroupBox, QTextEdit, QSplitter, 
    QAbstractItemView, QScrollArea, QCheckBox, QWidget, QTableWidgetItem,
    QHeaderView
)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
# UI_PATH = os.path.join(os.path.dirname(__file__), 'flood_prediction_plugin_dialog_base.ui')


class FloodPredictionPluginDialog(QDialog):
    def __init__(self):
        """Constructor."""
        super(FloodPredictionPluginDialog, self).__init__()
        
        # Set up the user interface from Designer through FORM_CLASS.
        self.setupUi()

    def setupUi(self):
        """Set up the user interface"""
        self.setObjectName("FloodPredictionPluginDialog")
        self.setWindowTitle("Flood Prediction Plugin")
        self.resize(800, 600)
        
        # Main layout
        main_layout = QVBoxLayout(self)
        
        # Create splitter for main content
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter)
        
        # Left panel
        left_widget = QtWidgets.QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Point Selection Group
        point_group = QGroupBox("Point Selection")
        point_layout = QVBoxLayout(point_group)
        
        self.pushButton_select_point = QPushButton("Select Point on Map")
        point_layout.addWidget(self.pushButton_select_point)
        
        coord_layout = QHBoxLayout()
        coord_layout.addWidget(QLabel("X:"))
        self.lineEdit_x_coord = QLineEdit()
        self.lineEdit_x_coord.setReadOnly(True)
        coord_layout.addWidget(self.lineEdit_x_coord)
        
        coord_layout.addWidget(QLabel("Y:"))
        self.lineEdit_y_coord = QLineEdit()
        self.lineEdit_y_coord.setReadOnly(True)
        coord_layout.addWidget(self.lineEdit_y_coord)
        
        point_layout.addLayout(coord_layout)
        left_layout.addWidget(point_group)
        
        # Layer Selection Group
        layer_group = QGroupBox("Layer Selection")
        layer_layout = QVBoxLayout(layer_group)
        
        layer_buttons_layout = QHBoxLayout()
        self.pushButton_refresh_layers = QPushButton("Refresh Layers")
        layer_buttons_layout.addWidget(self.pushButton_refresh_layers)
        
        self.pushButton_extract_data = QPushButton("Extract Data")
        layer_buttons_layout.addWidget(self.pushButton_extract_data)
        layer_layout.addLayout(layer_buttons_layout)
        
        layer_layout.addWidget(QLabel("Available Layers (check to select):"))
        
        # Create scrollable area for layer checkboxes
        self.scroll_area = QScrollArea()
        self.scroll_widget = QtWidgets.QWidget()
        self.scroll_layout = QVBoxLayout(self.scroll_widget)
        
        # Initialize layer checkboxes dictionary
        self.layer_checkboxes = {}  # Dictionary to store checkboxes {layer_name: checkbox}
        
        self.scroll_area.setWidget(self.scroll_widget)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setMaximumHeight(200)  # Increase height for better visibility
        self.scroll_area.setMinimumHeight(100)
        layer_layout.addWidget(self.scroll_area)
        
        left_layout.addWidget(layer_group)
        
        # Model Selection Group
        model_group = QGroupBox("Model Selection")
        model_layout = QVBoxLayout(model_group)
        
        model_file_layout = QHBoxLayout()
        model_file_layout.addWidget(QLabel("Model File:"))
        self.lineEdit_model_path = QLineEdit()
        self.lineEdit_model_path.setReadOnly(True)
        model_file_layout.addWidget(self.lineEdit_model_path)
        self.pushButton_load_model = QPushButton("Browse")
        model_file_layout.addWidget(self.pushButton_load_model)
        model_layout.addLayout(model_file_layout)
        
        self.label_model_features = QLabel("Expected features: Not loaded")
        self.label_model_features.setWordWrap(True)
        model_layout.addWidget(self.label_model_features)
        
        self.label_model_info = QLabel("Model info: Not loaded")
        self.label_model_info.setWordWrap(True)
        model_layout.addWidget(self.label_model_info)
        
        left_layout.addWidget(model_group)
        
        # Prediction Group
        prediction_group = QGroupBox("Prediction")
        prediction_layout = QVBoxLayout(prediction_group)
        
        prediction_buttons_layout = QHBoxLayout()
        self.pushButton_predict = QPushButton("Make Prediction")
        self.pushButton_predict.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; font-weight: bold; }")
        prediction_buttons_layout.addWidget(self.pushButton_predict)
        
        self.pushButton_clear_results = QPushButton("Clear Results")
        prediction_buttons_layout.addWidget(self.pushButton_clear_results)
        prediction_layout.addLayout(prediction_buttons_layout)
        
        self.label_prediction_result = QLabel("Prediction: Not available")
        self.label_prediction_result.setStyleSheet("QLabel { font-weight: bold; font-size: 12px; }")
        prediction_layout.addWidget(self.label_prediction_result)
        
        self.label_probability = QLabel("Probability: Not available")
        self.label_probability.setStyleSheet("QLabel { font-weight: bold; font-size: 12px; }")
        prediction_layout.addWidget(self.label_probability)
        
        left_layout.addWidget(prediction_group)
        
        # Status
        self.label_status = QLabel("Status: Ready")
        self.label_status.setStyleSheet("QLabel { color: blue; font-style: italic; }")
        left_layout.addWidget(self.label_status)
        
        splitter.addWidget(left_widget)
        
        # Right panel - Data visualization
        right_widget = QtWidgets.QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        data_group = QGroupBox("Extracted Data")
        data_layout = QVBoxLayout(data_group)
        
        data_layout.addWidget(QLabel("Data extracted from layers (double-click 'Feature Name' to edit):"))
        
        # Add suggestion label for common feature names
        self.label_feature_suggestions = QLabel("ðŸ’¡ Common features: dem, slope, aspect, twi, spi, ndvi, flow_accumulation")
        self.label_feature_suggestions.setStyleSheet("QLabel { color: #666; font-size: 10px; font-style: italic; }")
        self.label_feature_suggestions.setWordWrap(True)
        data_layout.addWidget(self.label_feature_suggestions)
        
        self.tableWidget_data = QTableWidget()
        self.tableWidget_data.setColumnCount(4)
        self.tableWidget_data.setHorizontalHeaderLabels(['Layer', 'Original Attribute', 'Feature Name', 'Value'])
        
        # Make only the Feature Name column editable
        self.tableWidget_data.setEditTriggers(QTableWidget.DoubleClick | QTableWidget.EditKeyPressed)
        data_layout.addWidget(self.tableWidget_data)
        
        right_layout.addWidget(data_group)
        splitter.addWidget(right_widget)
        
        # Set splitter proportions
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 1)
        
        # Dialog buttons
        button_layout = QHBoxLayout()
        main_layout.addLayout(button_layout)
        
        button_layout.addStretch()
        close_button = QPushButton("Close")
        close_button.clicked.connect(self.reject)
        button_layout.addWidget(close_button)
